# ****************************************************************************
# AUTOGENERATED BY CryptoBinPkg\Driver\Packaging\generate_cryptodriver.py
# AUTOGENED AS CryptoDriver.inc.dsc
# DO NOT MODIFY
# GENERATED ON: 2024-02-26 15:25:45.485204

# this is to be included by a platform :)
[Defines]
!ifndef PEI_CRYPTO_SERVICES
  DEFINE PEI_CRYPTO_SERVICES = NONE
!endif
!if $(PEI_CRYPTO_SERVICES) IN "ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD"
  !if $(PEI_CRYPTO_SERVICES) != NONE
    !ifndef PEI_CRYPTO_ARCH
      !error Please define PEI_CRYPTO_ARCH for your platform
    !endif
  !else
    DEFINE PEI_CRYPTO_ARCH = NONE
  !endif
!else
  !error PEI_CRYPTO_SERVICES must be set to one of ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD.
!endif

!ifndef DXE_CRYPTO_SERVICES
  DEFINE DXE_CRYPTO_SERVICES = NONE
!endif
!if $(DXE_CRYPTO_SERVICES) IN "ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD"
  !if $(DXE_CRYPTO_SERVICES) != NONE
    !ifndef DXE_CRYPTO_ARCH
      !error Please define DXE_CRYPTO_ARCH for your platform
    !endif
  !else
    DEFINE DXE_CRYPTO_ARCH = NONE
  !endif
!else
  !error DXE_CRYPTO_SERVICES must be set to one of ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD.
!endif

!ifndef RUNTIMEDXE_CRYPTO_SERVICES
  DEFINE RUNTIMEDXE_CRYPTO_SERVICES = NONE
!endif
!if $(RUNTIMEDXE_CRYPTO_SERVICES) IN "ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD"
  !if $(RUNTIMEDXE_CRYPTO_SERVICES) != NONE
    !ifndef RUNTIMEDXE_CRYPTO_ARCH
      !error Please define RUNTIMEDXE_CRYPTO_ARCH for your platform
    !endif
  !else
    DEFINE RUNTIMEDXE_CRYPTO_ARCH = NONE
  !endif
!else
  !error RUNTIMEDXE_CRYPTO_SERVICES must be set to one of ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD.
!endif

!ifndef SMM_CRYPTO_SERVICES
  DEFINE SMM_CRYPTO_SERVICES = NONE
!endif
!if $(SMM_CRYPTO_SERVICES) IN "ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD"
  !if $(SMM_CRYPTO_SERVICES) != NONE
    !ifndef SMM_CRYPTO_ARCH
      !error Please define SMM_CRYPTO_ARCH for your platform
    !endif
  !else
    DEFINE SMM_CRYPTO_ARCH = NONE
  !endif
!else
  !error SMM_CRYPTO_SERVICES must be set to one of ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD.
!endif

!ifndef STANDALONEMM_CRYPTO_SERVICES
  DEFINE STANDALONEMM_CRYPTO_SERVICES = NONE
!endif
!if $(STANDALONEMM_CRYPTO_SERVICES) IN "ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD"
  !if $(STANDALONEMM_CRYPTO_SERVICES) != NONE
    !ifndef STANDALONEMM_CRYPTO_ARCH
      !error Please define STANDALONEMM_CRYPTO_ARCH for your platform
    !endif
  !else
    DEFINE STANDALONEMM_CRYPTO_ARCH = NONE
  !endif
!else
  !error STANDALONEMM_CRYPTO_SERVICES must be set to one of ALL NONE TINY_SHA MINIMAL_SHA_SM3 SMALL_SHA_RSA STANDARD.
!endif

!if $(PEI_CRYPTO_SERVICES) == TINY_SHA
 !if $(PEI_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Pei_$(TARGET)_X64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Pei_$(TARGET)_AARCH64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Pei_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.TINY_SHA.inc.dsc
    }
!endif

!if $(DXE_CRYPTO_SERVICES) == TINY_SHA
 !if $(DXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Dxe_$(TARGET)_X64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Dxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Dxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.TINY_SHA.inc.dsc
    }
!endif

!if $(RUNTIMEDXE_CRYPTO_SERVICES) == TINY_SHA
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_RuntimeDxe_$(TARGET)_X64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_RuntimeDxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_RuntimeDxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.TINY_SHA.inc.dsc
    }
!endif

!if $(SMM_CRYPTO_SERVICES) == TINY_SHA
 !if $(SMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Smm_$(TARGET)_X64.inf 
 !endif
 !if $(SMM_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_Smm_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.TINY_SHA.inc.dsc
    }
!endif

!if $(STANDALONEMM_CRYPTO_SERVICES) == TINY_SHA
 !if $(STANDALONEMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_StandaloneMm_$(TARGET)_X64.inf 
 !endif
 !if $(STANDALONEMM_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_TINY_SHA_StandaloneMm_$(TARGET)_AARCH64.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.TINY_SHA.inc.dsc
    }
!endif

!if $(PEI_CRYPTO_SERVICES) == MINIMAL_SHA_SM3
 !if $(PEI_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Pei_$(TARGET)_X64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Pei_$(TARGET)_AARCH64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Pei_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.MINIMAL_SHA_SM3.inc.dsc
    }
!endif

!if $(DXE_CRYPTO_SERVICES) == MINIMAL_SHA_SM3
 !if $(DXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Dxe_$(TARGET)_X64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Dxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Dxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.MINIMAL_SHA_SM3.inc.dsc
    }
!endif

!if $(RUNTIMEDXE_CRYPTO_SERVICES) == MINIMAL_SHA_SM3
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_RuntimeDxe_$(TARGET)_X64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_RuntimeDxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_RuntimeDxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.MINIMAL_SHA_SM3.inc.dsc
    }
!endif

!if $(SMM_CRYPTO_SERVICES) == MINIMAL_SHA_SM3
 !if $(SMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Smm_$(TARGET)_X64.inf 
 !endif
 !if $(SMM_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_Smm_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.MINIMAL_SHA_SM3.inc.dsc
    }
!endif

!if $(STANDALONEMM_CRYPTO_SERVICES) == MINIMAL_SHA_SM3
 !if $(STANDALONEMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_StandaloneMm_$(TARGET)_X64.inf 
 !endif
 !if $(STANDALONEMM_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_MINIMAL_SHA_SM3_StandaloneMm_$(TARGET)_AARCH64.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.MINIMAL_SHA_SM3.inc.dsc
    }
!endif

!if $(PEI_CRYPTO_SERVICES) == SMALL_SHA_RSA
 !if $(PEI_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Pei_$(TARGET)_X64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Pei_$(TARGET)_AARCH64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Pei_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.SMALL_SHA_RSA.inc.dsc
    }
!endif

!if $(DXE_CRYPTO_SERVICES) == SMALL_SHA_RSA
 !if $(DXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Dxe_$(TARGET)_X64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Dxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Dxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.SMALL_SHA_RSA.inc.dsc
    }
!endif

!if $(RUNTIMEDXE_CRYPTO_SERVICES) == SMALL_SHA_RSA
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_RuntimeDxe_$(TARGET)_X64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_RuntimeDxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_RuntimeDxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.SMALL_SHA_RSA.inc.dsc
    }
!endif

!if $(SMM_CRYPTO_SERVICES) == SMALL_SHA_RSA
 !if $(SMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Smm_$(TARGET)_X64.inf 
 !endif
 !if $(SMM_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_Smm_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.SMALL_SHA_RSA.inc.dsc
    }
!endif

!if $(STANDALONEMM_CRYPTO_SERVICES) == SMALL_SHA_RSA
 !if $(STANDALONEMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_StandaloneMm_$(TARGET)_X64.inf 
 !endif
 !if $(STANDALONEMM_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_SMALL_SHA_RSA_StandaloneMm_$(TARGET)_AARCH64.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.SMALL_SHA_RSA.inc.dsc
    }
!endif

!if $(PEI_CRYPTO_SERVICES) == STANDARD
 !if $(PEI_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Pei_$(TARGET)_X64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Pei_$(TARGET)_AARCH64.inf 
 !endif
 !if $(PEI_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Pei_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.STANDARD.inc.dsc
    }
!endif

!if $(DXE_CRYPTO_SERVICES) == STANDARD
 !if $(DXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Dxe_$(TARGET)_X64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Dxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(DXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Dxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.STANDARD.inc.dsc
    }
!endif

!if $(RUNTIMEDXE_CRYPTO_SERVICES) == STANDARD
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_RuntimeDxe_$(TARGET)_X64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_RuntimeDxe_$(TARGET)_AARCH64.inf 
 !endif
 !if $(RUNTIMEDXE_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_RuntimeDxe_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.STANDARD.inc.dsc
    }
!endif

!if $(SMM_CRYPTO_SERVICES) == STANDARD
 !if $(SMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Smm_$(TARGET)_X64.inf 
 !endif
 !if $(SMM_CRYPTO_ARCH) == IA32
  [Components.IA32]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_Smm_$(TARGET)_IA32.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.STANDARD.inc.dsc
    }
!endif

!if $(STANDALONEMM_CRYPTO_SERVICES) == STANDARD
 !if $(STANDALONEMM_CRYPTO_ARCH) == X64
  [Components.X64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_StandaloneMm_$(TARGET)_X64.inf 
 !endif
 !if $(STANDALONEMM_CRYPTO_ARCH) == AARCH64
  [Components.AARCH64]
    $(SHARED_CRYPTO_PATH)/Driver/Bin/CryptoDriverBin_STANDARD_StandaloneMm_$(TARGET)_AARCH64.inf 
 !endif

 [Components]
   CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf {
     <PcdsFixedAtBuild>
      !include $(SHARED_CRYPTO_PATH)/Driver/Bin/Crypto.pcd.STANDARD.inc.dsc
    }
!endif


# LibraryClasses for 
!if $(PEI_CRYPTO_ARCH) == X64
  [LibraryClasses.X64.PEIM, LibraryClasses.X64.PEI_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf
!endif

!if $(PEI_CRYPTO_ARCH) == AARCH64
  [LibraryClasses.AARCH64.PEIM, LibraryClasses.AARCH64.PEI_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf
!endif

!if $(PEI_CRYPTO_ARCH) == IA32
  [LibraryClasses.IA32.PEIM, LibraryClasses.IA32.PEI_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/PeiCryptLib.inf
!endif

!if $(DXE_CRYPTO_ARCH) == X64
  [LibraryClasses.X64.DXE_DRIVER, LibraryClasses.X64.UEFI_DRIVER, LibraryClasses.X64.UEFI_APPLICATION, LibraryClasses.X64.DXE_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf
!endif

!if $(DXE_CRYPTO_ARCH) == AARCH64
  [LibraryClasses.AARCH64.DXE_DRIVER, LibraryClasses.AARCH64.UEFI_DRIVER, LibraryClasses.AARCH64.UEFI_APPLICATION, LibraryClasses.AARCH64.DXE_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf
!endif

!if $(DXE_CRYPTO_ARCH) == IA32
  [LibraryClasses.IA32.DXE_DRIVER, LibraryClasses.IA32.UEFI_DRIVER, LibraryClasses.IA32.UEFI_APPLICATION, LibraryClasses.IA32.DXE_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/DxeCryptLib.inf
!endif

!if $(RUNTIMEDXE_CRYPTO_ARCH) == X64
  [LibraryClasses.X64.DXE_RUNTIME_DRIVER]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf
!endif

!if $(RUNTIMEDXE_CRYPTO_ARCH) == AARCH64
  [LibraryClasses.AARCH64.DXE_RUNTIME_DRIVER]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf
!endif

!if $(RUNTIMEDXE_CRYPTO_ARCH) == IA32
  [LibraryClasses.IA32.DXE_RUNTIME_DRIVER]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/RuntimeDxeCryptLib.inf
!endif

!if $(SMM_CRYPTO_ARCH) == X64
  [LibraryClasses.X64.DXE_SMM_DRIVER, LibraryClasses.X64.SMM_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf
!endif

!if $(SMM_CRYPTO_ARCH) == IA32
  [LibraryClasses.IA32.DXE_SMM_DRIVER, LibraryClasses.IA32.SMM_CORE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/SmmCryptLib.inf
!endif

!if $(STANDALONEMM_CRYPTO_ARCH) == X64
  [LibraryClasses.X64.MM_STANDALONE, LibraryClasses.X64.MM_CORE_STANDALONE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf
!endif

!if $(STANDALONEMM_CRYPTO_ARCH) == AARCH64
  [LibraryClasses.AARCH64.MM_STANDALONE, LibraryClasses.AARCH64.MM_CORE_STANDALONE]
    BaseCryptLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf
    TlsLib|CryptoPkg/Library/BaseCryptLibOnProtocolPpi/StandaloneMmCryptLib.inf
!endif

# AUTOGEN ENDS
# ****************************************************************************
